name: 构建容器镜像

on:
  workflow_dispatch: # 手动触发

  schedule:
    # 每天凌晨 0 点 UTC 时间运行 (即北京时间早上 8 点)
    - cron: '0 0 * * *'

env:
  REGISTRY: ghcr.io # 直接设置为 ghcr.io
  IMAGE: vakyi/docker-clash-verge-rev # 请根据你的实际仓库名调整

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }} # 检出当前仓库的代码

      - name: 获取最新上游版本号
        id: get_upstream_version
        run: |
          # 使用 GitHub CLI 获取 clash-verge-rev/clash-verge-rev 的最新发布标签
          # 注意：这里假设最新发布标签的格式是 vX.Y.Z
          LATEST_RELEASE_TAG=$(gh release view --repo clash-verge-rev/clash-verge-rev --json tagName --jq .tagName)
          echo "Latest upstream release tag: $LATEST_RELEASE_TAG"
          # 移除 'v' 前缀，得到纯版本号
          VERSION_WITHOUT_V=$(echo $LATEST_RELEASE_TAG | sed 's/^v//')
          echo "UPSTREAM_VERSION=$VERSION_WITHOUT_V" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 需要 GITHUB_TOKEN 来调用 gh cli

      - name: 设置环境变量
        run: |
          # 将获取到的上游版本号设置为 GIT_TAG_VERSION
          echo "GIT_TAG_VERSION=${{ env.UPSTREAM_VERSION }}" >> $GITHUB_ENV
          echo "REGISTRY_USERNAME=${{ github.repository_owner }}" >> $GITHUB_ENV

      - name: 检查环境变量
        run: |
          echo "REGISTRY:          ${{ env.REGISTRY }}"
          echo "REGISTRY_USERNAME: ${{ env.REGISTRY_USERNAME }}"
          echo "IMAGE:             ${{ env.IMAGE }}"
          echo "GIT_TAG_VERSION:   ${{ env.GIT_TAG_VERSION }}"

      # 配置 QEMU 和 buildx 用于多架构镜像的构建
      - name: 配置 QEMU 环境
        uses: docker/setup-qemu-action@v3

      - name: 配置容器环境
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: 检查构建器
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # 根据输入自动生成 tag 和 label 等数据
      - name: 构建容器元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE }}
          tags: |
            type=raw,value=${{ env.GIT_TAG_VERSION }} # 使用上游版本作为 tag
            type=raw,value=latest,enable=${{ github.event_name == 'schedule' }} # 定时任务时也打 latest 标签
          labels: |
            org.opencontainers.image.version=${{ env.GIT_TAG_VERSION }}

      # 缓存 Docker 镜像以加速构建
      - name: 配置容器缓存层
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 登录到容器仓库
      - name: 登录容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 检查容器元数据
        run: |
          echo "docker iamge version: ${{ steps.meta.outputs.version }}"
          echo ""
          echo "docker iamge tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "docker iamge labels:"
          echo "${{ steps.meta.outputs.labels }}"

      - name: 构建容器并推送注册表
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          platforms: |
            linux/arm64
            linux/amd64
          outputs: type=registry,push=true,compression=gzip,compression-level=9
          provenance: false
          build-args: |
            VERSION=${{ env.GIT_TAG_VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: 检查镜像
        run: |
          docker buildx imagetools inspect \
          ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ steps.meta.outputs.version }}
